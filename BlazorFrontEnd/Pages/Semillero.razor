@page "/semillero"

@using BlazorFrontEnd.Services

@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inherits ValidacionAcceso

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Semillero</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#addSemilleroModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Semillero</span>
                        </a>
                        <a href="#consultarSemilleroModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Semillero</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (semilleros == null)
            {
                <p>Cargando...</p>
            }
            else if (!semilleros.Any())
            {
                <p>No hay semilleros registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Fecha de Fundación</th>
                            <th>Grupo de Investigación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var semillero in semilleros)
                        {
                            <tr>
                                <td>@semillero["id"]</td>
                                <td>@semillero["nombre"]</td>
                                <td>@semillero["fecha_fundacion"]</td>
                                <td>@semillero["grupo_investigacion"]</td>
                                <td>
                                    <a href="#editSemilleroModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(semillero)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#deleteSemilleroModal" class="delete" data-bs-toggle="modal" @onclick="() => SetSemilleroToDelete(semillero)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Semillero -->
<div class="modal fade" id="addSemilleroModal" tabindex="-1" role="dialog" aria-labelledby="addSemilleroModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentSemillero" OnValidSubmit="SaveSemillero">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="addSemilleroModalLabel">@(isNewSemillero ? "Añadir" : "Editar") Semillero</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID</label>
                        <InputText class="form-control" @bind-Value="id" />
                        <ValidationMessage For="@(() => id)" />
                    </div>
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="nombre" />
                        <ValidationMessage For="@(() => nombre)" />
                    </div>
                    <div class="form-group">
                        <label>Fecha de Fundación</label>
                        <InputDate class="form-control" @bind-Value="fechaFundacion" />
                        <ValidationMessage For="@(() => fechaFundacion)" />
                    </div>
                    <div class="form-group">
                        <label>Grupo de Investigación</label>
                        <InputText class="form-control" @bind-Value="grupoInvestigacion" />
                        <ValidationMessage For="@(() => grupoInvestigacion)" />
                    </div>
                    <div class="form-group">
                        <label>Semillero Línea</label>
                        <InputText class="form-control" @bind-Value="semilleroLinea" />
                        <ValidationMessage For="@(() => semilleroLinea)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewSemillero ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Semillero -->
<div class="modal fade" id="deleteSemilleroModal" tabindex="-1" role="dialog" aria-labelledby="deleteSemilleroModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteSemilleroModalLabel">Eliminar Semillero</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este semillero?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSemillero">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Semillero -->
<div class="modal fade" id="consultarSemilleroModal" tabindex="-1" role="dialog" aria-labelledby="consultarSemilleroModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarSemilleroModalLabel">Consultar Semillero</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>ID</label>
                    <input type="text" class="form-control" @bind="consultaId" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Nombre</label>
                    <input type="text" class="form-control" @bind="consultaNombre" readonly />
                </div>
                <div class="form-group">
                    <label>Fecha de Fundación</label>
                    <input type="text" class="form-control" @bind="consultaFechaFundacion" readonly />
                </div>
                <div class="form-group">
                    <label>Grupo de Investigación</label>
                    <input type="text" class="form-control" @bind="consultaGrupoInvestigacion" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarSemillero">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarSemilleroConsultado" disabled="@(!semilleroEncontrado)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarSemilleroConsultado" disabled="@(!semilleroEncontrado)">Eliminar</button>
            </div>
        </div>
    </div>
</div>


@code {

    private string semilleroLinea = "";
    private List<Dictionary<string, object>> semilleros = new List<Dictionary<string, object>>();
    
    private Dictionary<string, object> currentSemillero = new Dictionary<string, object>();

    private bool isNewSemillero = true;

    private bool semilleroEncontrado = false;

    private string id = "";
    private string nombre = "";
    private DateTime? fechaFundacion = null;
    private string grupoInvestigacion = "";

    private string consultaId = "";
    private string consultaNombre = "";
    private DateTime? consultaFechaFundacion = null;
    private string consultaGrupoInvestigacion = "";

    private string path = "api/proyecto/semillero";

    protected override async Task OnInitializedAsync()
    {
        await LoadSemilleros();
    }

    private async Task LoadSemilleros()
    {
        try
        {
            semilleros = await ApiService.GetDataAsync(path);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los semilleros: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar los semilleros. Por favor, intente nuevamente.");
        }
    }

    private void PrepareForAddOrEdit(Dictionary<string, object>? semillero = null)
    {
        isNewSemillero = semillero == null;
        currentSemillero = semillero ?? new Dictionary<string, object>();

        id = currentSemillero.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
        nombre = currentSemillero.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
        fechaFundacion = currentSemillero.TryGetValue("fecha_fundacion", out var f) ? DateTime.Parse(f?.ToString() ?? "") : (DateTime?)null;
        grupoInvestigacion = currentSemillero.TryGetValue("grupo_investigacion", out var g) ? g?.ToString() ?? "" : "";
        semilleroLinea = currentSemillero.TryGetValue("semillero_linea", out var sl) ? sl?.ToString() ?? "" : "";

        JSRuntime.InvokeVoidAsync("showModal", "addSemilleroModal");
    }

    private void PrepareForConsulta()
    {
        consultaId = "";
        consultaNombre = "";
        consultaFechaFundacion = null;
        consultaGrupoInvestigacion = "";
        semilleroEncontrado = false;
    }

    private void SetSemilleroToDelete(Dictionary<string, object> semillero)
    {
        currentSemillero = semillero;
        JSRuntime.InvokeVoidAsync("showModal", "deleteSemilleroModal");
    }

    private async Task SaveSemillero()
    {
        try
        {
            currentSemillero["id"] = id;
            currentSemillero["nombre"] = nombre;
            currentSemillero["fecha_fundacion"] = fechaFundacion?.ToString("yyyy-MM-dd") ?? "";
            currentSemillero["grupo_investigacion"] = grupoInvestigacion;
            currentSemillero["semillero_linea"] = semilleroLinea;
            
            bool success;
            if (isNewSemillero)
            {
                success = await ApiService.AddEntityAsync(path, currentSemillero);
            }
            else
            {
                success = await ApiService.EditEntityAsync(path + "/id", id, currentSemillero);
            }

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addSemilleroModal");
                await LoadSemilleros();

                id = nombre = grupoInvestigacion = "";
                fechaFundacion = null;
                currentSemillero = new Dictionary<string, object>();
                isNewSemillero = true;

                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el semillero. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar semillero: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el semillero. Por favor, intente nuevamente.");
        }
    }

    private async Task DeleteSemillero()
    {
        try
        {
            if (currentSemillero.TryGetValue("id", out var idObj) && idObj is string idStr)
            {
                bool success = await ApiService.DeleteEntityAsync(path + "/id", idStr);

                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteSemilleroModal");
                    await LoadSemilleros();
                    await JSRuntime.InvokeVoidAsync("alert", "Semillero eliminado con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el semillero. Por favor, intente nuevamente.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar semillero: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el semillero. Por favor, intente nuevamente.");
        }
    }

    private async Task ConsultarSemillero()
    {
        try
        {
            var resultado = await ApiService.GetDataAsync(path + $"/id/{consultaId}");
            if (resultado.Any())
            {
                var semilleroConsultado = resultado.First();
                consultaNombre = semilleroConsultado["nombre"]?.ToString() ?? "";
                consultaFechaFundacion = DateTime.Parse(semilleroConsultado["fecha_fundacion"]?.ToString() ?? "");
                consultaGrupoInvestigacion = semilleroConsultado["grupo_investigacion"]?.ToString() ?? "";
                semilleroEncontrado = true;
            }
            else
            {
                consultaId = consultaNombre = consultaGrupoInvestigacion = "";
                consultaFechaFundacion = null;
                semilleroEncontrado = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ningún semillero con ese código.");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar semillero: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el semillero. Por favor, intente nuevamente.");
        }
    }

    private async Task ModificarSemilleroConsultado()
    {
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["nombre"] = consultaNombre,
            ["fecha_fundacion"] = consultaFechaFundacion?.ToString("yyyy-MM-dd") ?? "",
            ["grupo_investigacion"] = consultaGrupoInvestigacion
        });

        await JSRuntime.InvokeVoidAsync("hideModal", "consultarSemilleroModal");
    }

    private async Task EliminarSemilleroConsultado()
    {
        SetSemilleroToDelete(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["nombre"] = consultaNombre,
            ["fecha_fundacion"] = consultaFechaFundacion?.ToString("yyyy-MM-dd") ?? "",
            ["grupo_investigacion"] = consultaGrupoInvestigacion
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarSemilleroModal");
    }
}
