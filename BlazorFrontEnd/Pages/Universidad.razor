@page "/universidad"
<!--
Define la URL relativa que carga este componente. En este caso, cuando un usuario navega a "/universidad",
este componente Blazor se carga y se representa en la página.
--> 
@using BlazorFrontEnd.Services
<!--
// Importa el espacio de nombres BlazorFrontEnd.Services para que puedas utilizar los servicios dentro de este componente.
-->

@inject ApiService ApiService
<!--
// Inyecta una instancia del servicio ApiService. Esto permite que el componente llame a la API a través de este servicio.
-->

@inject IJSRuntime JSRuntime
<!--
// Inyecta IJSRuntime, que es un servicio Blazor para ejecutar JavaScript desde C#.
-->
@inherits ValidacionAcceso

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Universidades</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#addUniversidadModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nueva universidad</span>
                        </a>
                        <!-- Botón que abre el modal para añadir una nueva universidad -->

                        <a href="#consultarUniversidadModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar universidad</span>
                        </a>
                        <!-- Botón que abre el modal para consultar una universidad existente -->
                    </div>
                </div>
            </div>
            @if (universidad == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!universidad.Any())
            {
                <p>No hay universidad registradas.</p>
                <!-- Muestra un mensaje si no hay universidad en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de universidad si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Código</th>
                            <th>Nombre</th>
                            <th>Tipo</th>
                            <th>Ciudad</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var universidad in universidad)
                        {
                            <tr>
                                <td>@universidad["id"]</td>
                                <td>@universidad["nombre"]</td>
                                <td>@universidad["tipo"]</td>
                                <td>@universidad["ciudad"]</td>
                                <td>
                                    <a href="#editUniversidadModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(universidad)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar la universidad -->

                                    <a href="#deleteUniversidadModal" class="delete" data-bs-toggle="modal" @onclick="() => SetUniversidadToDelete(universidad)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar la universidad -->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Universidad -->
<div class="modal fade" id="addUniversidadModal" tabindex="-1" role="dialog" aria-labelledby="addUniversidadModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentUniversidad" OnValidSubmit="SaveUniversidad">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="addUniversidadModalLabel">@(isNewUniversidad ? "Añadir" : "Editar") Universidad</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando una Universidad -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos de la Universidad -->
                    <div class="form-group">
                        <label>Código</label>
                        <InputText class="form-control" @bind-Value="id"/>
                        <ValidationMessage For="@(() => id)" />
                        <!-- Campo para ingresar el código de la Universidad -->
                    </div>
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="nombre" />
                        <ValidationMessage For="@(() => nombre)" />
                        <!-- Campo para ingresar el nombre de la Universidad -->
                    </div>
                    <div class="form-group">
                        <label>Tipo</label>
                        <InputText class="form-control" @bind-Value="tipo" />
                        <ValidationMessage For="@(() => tipo)" />
                        <!-- Campo para ingresar el tipo de la Universidad -->
                    </div>
                    <div class="form-group">
                        <label>Ciudad</label>
                        <InputText class="form-control" @bind-Value="ciudad" />
                        <ValidationMessage For="@(() => ciudad)" />
                        <!-- Campo para ingresar el ciudad de la Universidad -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewUniversidad ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Universidad -->
<div class="modal fade" id="deleteUniversidadModal" tabindex="-1" role="dialog" aria-labelledby="deleteUniversidadModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteUniversidadModalLabel">Eliminar Universidad</h5>
                <!-- Título del modal para eliminar una Universidad -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta Universidad?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteUniversidad">Eliminar</button>
                <!-- Botón para confirmar la eliminación de la Universidad -->
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Universidad -->
<div class="modal fade" id="consultarUniversidadModal" tabindex="-1" role="dialog" aria-labelledby="consultarUniversidadModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarUniversidadModalLabel">Consultar Universidad</h5>
                <!-- Título del modal para consultar una Universidad -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el id y mostrar la información de la Universidad consultada -->
                <div class="form-group">
                    <label>Código</label>
                    <input type="text" class="form-control" @bind="consultaid" @bind:event="oninput"/>
                    <!-- Campo para ingresar el id de la Universidad a consultar -->
                </div>
                <div class="form-group">
                    <label>Nombre</label>
                    <input type="text" class="form-control" @bind="consultaNombre" readonly />
                    <!-- Campo para mostrar el nombre de la Universidad consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Tipo</label>
                    <input type="text" class="form-control" @bind="consultaTipo" readonly/>
                    <!-- Campo para mostrar el Tipo de la Universidad consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Ciudad</label>
                    <input type="text" class="form-control" @bind="consultaCiudad" readonly />
                    <!-- Campo para mostrar el Ciudad de la Universidad consultada, es de solo lectura -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarUniversidad">Consultar</button>
                <!-- Botón para realizar la consulta de la Universidad con el código ingresado -->
                <button type="button" class="btn btn-warning" @onclick="ModificarUniversidadConsultada" disabled="@(!universidadEncontrada)">Modificar</button>
                <!-- Botón para modificar la Universidad consultada si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarUniversidadConsultada" disabled="@(!universidadEncontrada)">Eliminar</button>
                <!-- Botón para eliminar la Universidad consultada si fue encontrada -->
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> universidad = new List<Dictionary<string, object>>();
    
    private Dictionary<string, object> currentUniversidad = new Dictionary<string, object>();

    private bool isNewUniversidad = true;

    private bool universidadEncontrada = false;

    private string id = "";

    private string nombre = "";

    private string tipo = "";

    private string ciudad = "";

    private string consultaid = "";

    private string consultaNombre = "";

    private string consultaTipo = "";

    private string consultaCiudad = "";

    private string path = "api/proyecto/universidad";

    protected override async Task OnInitializedAsync()
    {
        await LoadUniversidad();
    }

    private async Task LoadUniversidad()
    {
        try
        {
            universidad = await ApiService.GetDataAsync(path);
            StateHasChanged();
            // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar universidad: {ex.Message}");
            // Muestra un error en la consola si la carga de universidad falla.
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar universidad. Por favor, intente nuevamente.");
        }
    }

    private void PrepareForAddOrEdit(Dictionary<string, object>? universidad = null)
    {

        isNewUniversidad = universidad == null;
        // Si 'universidad' es null, significa que estamos añadiendo una nueva universidad. De lo contrario, estamos editando.
        currentUniversidad = universidad ?? new Dictionary<string, object>();
        // Si 'universidad' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la universidad seleccionada.

        id = currentUniversidad.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
        nombre = currentUniversidad.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
        tipo = currentUniversidad.TryGetValue("tipo", out var e) ? e?.ToString() ?? "" : "";
        ciudad = currentUniversidad.TryGetValue("ciudad", out var t) ? t?.ToString() ?? "" : "";

        JSRuntime.InvokeVoidAsync("showModal", "addUniversidadModal");
        // Muestra el modal para añadir o editar universidad usando JavaScript.
    }

    private void PrepareForConsulta()
    {
        consultaid = "";
        consultaNombre = "";
        consultaTipo = "";
        consultaCiudad = "";
        universidadEncontrada = false;
        // Limpia los campos de consulta y establece 'universidadEncontrada' en false.
    }

    private void SetUniversidadToDelete(Dictionary<string, object> universidad)
    {
        currentUniversidad = universidad;
        // Establece la universidad actual como la universidad a eliminar.
        JSRuntime.InvokeVoidAsync("showModal", "deleteUniversidadModal");
        // Muestra el modal para confirmar la eliminación usando JavaScript.
    }

    private async Task SaveUniversidad()
    {
        try
        {
            currentUniversidad["id"] = id;
            currentUniversidad["nombre"] = nombre;
            currentUniversidad["tipo"] = tipo;
            currentUniversidad["ciudad"] = ciudad;
            // Actualiza 'currentUniversidad' con los valores actuales de los campos de entrada.

            bool success;
            if (isNewUniversidad)
            {
                success = await ApiService.AddEntityAsync(path, currentUniversidad);
                // Si estamos editando una universidad existente, llama a la API para editarla.

            }
            else
            {
                success = await ApiService.EditEntityAsync(path + "/id", id, currentUniversidad);
            }

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addUniversidadModal");
                // Si la operación tiene éxito, cierra el modal.

                await LoadUniversidad();
                // Recarga la lista de universidad para reflejar los cambios.

                id = nombre = tipo = ciudad = string.Empty;
                currentUniversidad = new Dictionary<string, object>();
                isNewUniversidad = true;
                // Limpia los campos del formulario y restablece el estado.

                StateHasChanged();
                // Fuerza la actualización de la UI.

                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la universidad. Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar universidad: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la universidad. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }

    private async Task DeleteUniversidad()
    {
        try
        {
            if (currentUniversidad.TryGetValue("id", out var idObj) && idObj is string idStr)
            {
                bool success = await ApiService.DeleteEntityAsync(path + "/id", idStr);
                // Si se encuentra el código de la universidad actual, llama a la API para eliminarla.
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteUniversidadModal");
                    await LoadUniversidad();
                    await JSRuntime.InvokeVoidAsync("alert", "Universidad eliminada con éxito.");
                    // Si la operación tiene éxito, cierra el modal, recarga la lista de Universidad y muestra un mensaje de éxito.
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la Universidad. Por favor, intente nuevamente.");
                    // Si la operación falla, muestra un mensaje de error.
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar Universidad: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la universidad. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la eliminación.
        }
    }

    private async Task ConsultarUniversidad()
    {
        try
        {
            var resultado = await ApiService.GetDataAsync(path+$"/id/{consultaid}");
            if (resultado.Any())
            {
                var universidadConsultada = resultado.First();
                consultaNombre = universidadConsultada["nombre"]?.ToString() ?? "";
                consultaTipo = universidadConsultada["tipo"]?.ToString() ?? "";
                consultaCiudad = universidadConsultada["ciudad"]?.ToString() ?? "";
                universidadEncontrada = true;
                // Si se encuentra una universidad con el código consultado, muestra los datos en los campos correspondientes.
            }
            else
            {
                consultaNombre = "";
                consultaTipo = "";
                consultaCiudad = "";
                universidadEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ninguna universidad con ese código.");
                // Si no se encuentra ninguna universidad, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar universidad: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar la universidad. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }

    private async Task ModificarUniversidadConsultada()
    {

        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["id"] = consultaid,
            ["nombre"] = consultaNombre,
            ["tipo"] = consultaTipo,
            ["ciudad"] = consultaCiudad
        });

        await JSRuntime.InvokeVoidAsync("hideModal", "consultarUniversidadModal");

        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }

    private async Task EliminarUniversidadConsultada()
    {
        SetUniversidadToDelete(new Dictionary<string, object>
        {
            ["id"] = consultaid,
            ["nombre"] = consultaNombre,
            ["tipo"] = consultaTipo,
            ["ciudad"] = consultaCiudad
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarUniversidadModal");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
}